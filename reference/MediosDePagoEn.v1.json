{
  "openapi": "3.0.0",
  "info": {
    "title": "ApiColombia",
    "version": "1.0",
    "description": "This Webservice and its architecture allow any application regardless of development language to benefit from a set of business rules and services, due to compliance with SOAP, WSDL, and XML standards.\n\nTo make use of Webservice, you must have a programming language that can consume them, some languages have better support than others from point of view of ease of access; However, if you do not have a language that encapsulates communication, it can always be done even at socket level using HTTP protocol in conjunction with SOAP specification.\n\nFor those languages that have good support it is best to go through WSDL for Webservice.\nDirect integration into payment method in general is NOT recommended, as it hinders other services that may be implemented in Placetopay interface, while making each new payment method released require further development by commerce. So just consider this integration if:\n\n* Complete transaction flow not available by redirect.\n* Use service as a white label.\n\nLike any integration process, this will require certification from Placetopay support staff to review operational issues, best practices, and usability.\n\n**What obligations do I have when using this integration?**\n\nNote that when using this type of integration, certification is required, and deployment times can be much higher than when integrated by `WebCheckOut`.\n\n**Capturing information**\nWhen consuming transaction creation service, your app must provide information about payer, buyer, and transaction. If they correspond to same person, you only must enter payer's information.\n\nTo provide this data, your app must capture it directly in process or from a previously enabled source of information.\n\n`We recommend that you have an SSL digital certificate for your site`.\n\n `preferred language for integration must support TLS 1.2 or higher`\n  \n flows of each of means of payment for greater understanding are described below\n\n\n**PSE Integration Flow**\n\nHow does deployment work?\n1. It is displayed as a PSE payment option (Debits to savings and current accounts in Colombia).\n2. Once user selects it, list of banks is presented (it must be cached locally, and its refresh must be 1 time per day) and type of banking to be deployed (people or companies).\n3. While client commits operation, service must be consumed to make transaction request.\n4. If request is successful, URL to which it must be sent to client to perform transaction at bank is returned. Otherwise, reason for transaction rejection is returned.\n5. Store transaction data returned by service (transaction ID, authorization/cus, placetopay session identifier).\n6. Redirect browser to returned URL in case of success.\n7. Once transaction returns to URL specified in Create Transaction consumption, you must ask for status of transaction by consuming a service.\n8.\tDepending on response of service, transaction may have been approved, rejected, or remain pending processing.\n9.Inform user of status of transaction.\n10 .\tIf transaction is pending, or if client leaving portal has not returned, you must have a probe asking for status of transaction.\n\n\n**Yours integration flow with TUYA OR EXITO card**\n\nHow does deployment work?\n\n1.\tIt is displayed as a payment option Success Card and Alkosto Card (depending on whether you have an agreement for each of means of payment). *Once user selects payment method and confirms transaction, service must be consumed to make transaction request.\n2.\tIf request is successful, URL to which it must be sent to client to perform operation in middle of payment is returned. Otherwise, reason for transaction rejection is returned.\n3.\tStore transaction data returned by service (transaction ID, authorization, placetopay session identifier).\n4.\tRedirect browser to returned URL in case of success.\n5.\tOnce transaction returns (returns to URL specified in Create Transaction consumption), you should ask for status of transaction by consuming a service.\n6.\tDepending on response of service, transaction may have been approved, rejected, or remain pending processing.\n7.\tInform user of status of transaction.\n8.\tIf transaction is pending, or if client leaving portal has not returned, you must have a probe asking for status of transaction.\n\n\n**Effective integration flow**\n\n1. property invokes addOrder method to add a cash payment order.\n2. If you want to delete a payment order you can invoke deleteOrder method, it should be noted that order cannot be deleted if it has already been paid.\n3. Eventually you can invoke flushOrders method that allows you to purge payment orders that are already expired and have not been paid.\n4.\tTo get PDF with instructions for paying for cash order, you must invoke getOrderPDF method that returns a Base64-encoded PDF.\n5.\tTo query status of a transaction, you can invoke getOrder method which provides all order data including status and whether transaction information is paid for.\n\n"
  },
  "servers": [
    {
      "url": "https://test.placetopay.com/soap/",
      "description": "Test Mode "
    }
  ],
  "paths": {
    "pse/v11": {
      "post": {
        "summary": "Getbanklist",
        "operationId": "post-pse/v11/?wsdl",
        "responses": {
          "200": {
            "description": "**Bank[]**. An arrangement with the list of authorized banks.\n",
            "content": {
              "application/soap+xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Example": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <getBankList xmlns=\"https://placetopay.com/soap/pse\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n        </getBankList>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "Gets list of banks available for trade establishment in ACH Colombia's PSE system.\n\n**Parameters**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Authentication data (Go to authentication session for more details)|"
        },
        "tags": [
          "PSE Service"
        ],
        "description": "Once customer has determined that they want to pay by debit to a checking or savings account, they must present to them list of banks that are currently available for transaction. This list of banks is obtained by consuming getBankList method which must be consumed once a day, which requires that a cache mechanism be available to retrieve list of cache if service has already been consumed in day.\n\nAdditionally, when choosing which bank to make transaction with, user must also indicate what type of bank interface they want to deploy, that is, whether people’s or companies' interface.\n\nIf for any reason list of banks could not be obtained, a message \" list of Financial Institutions could not be obtained, please try later\" and again consume bank list service to try to get that list and be able to cache it.\nNote that in Multicredit operations you must use service code for multicredit and that you must always pass all dependent accounts (entity, service) for credits so some of them go with values in zero.  credit list is required to correspond to all dependent subcodes.\n"
      },
      "parameters": []
    },
    "/pse/v11": {
      "post": {
        "summary": "getTransactionInformation",
        "operationId": "post-PSEGetTransaccionInformation",
        "responses": {
          "200": {
            "description": "**TransactionInformation**. Transaction status information."
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Example": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <getTransactionInformation xmlns=\"https://placetopay.com/soap/pse\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n            <transactionID xmlns=\"\">1503290218</transactionID>\n        </getTransactionInformation>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "Gets information of a transaction, it must be queried for any operation previously created with createTransaction or `createTransactionMultiCredit` method either when it returns from bank or when at least 7 minutes have elapsed since client was redirected to bank interface. It should be consumed at intervals of at least every 12 minutes until it has a transaction state other than `PENDING`.\n\n**PARAMETERS**\n\n| Name | Type | Description |\n|-----------|------|-------------|\n| auth | Authentication | Authentication data |\n| transactionID | int | Unique transaction identifier in Placetopay, equivalent to return in transaction creation. |\n"
        },
        "tags": [
          "PSE Service"
        ],
        "description": "Once client has completed transaction on bank interface, bank redirects client to URL specified when creating transaction, at this entry point to its application, you must consume `getTransactionInformation` service that allows you to determine status of transaction. Only if transaction has an OK status is because transaction was authorized, if on contrary it gets a PENDING status is because it does not yet have a final response from bank about transaction.\n\nWhether client returns to re-entry point and transaction is pending, or has abandoned operation and broken normal flow, getTransactionInformation service must be consumed for all operations that since createTransaction `was invoked` take more than 7 minutes without a final state of operation\n"
      },
      "parameters": []
    },
    "pse/v11/": {
      "post": {
        "summary": "CreateTransaccion",
        "operationId": "post-pse-v11",
        "responses": {
          "200": {
            "description": "**PSETransactionResponse**. Respuesta de la creación de la transacción, tenga en cuenta que la URL del banco se entrega solo si la propiedad returnCode es `SUCCESS`."
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <createTransaction xmlns=\"https://placetopay.com/soap/pse\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n            <transaction xmlns=\"\">\n                <bankCode>1022</bankCode>\n                <bankInterface>0</bankInterface>\n                <returnURL>https://www.google.com/</returnURL>\n                <reference>123456</reference>\n                <description>Pago prueba</description>\n                <language>ES</language>\n                <currency>COP</currency>\n                <totalAmount>1000</totalAmount>\n                <taxAmount>0</taxAmount>\n                <devolutionBase>0</devolutionBase>\n                <tipAmount>0</tipAmount>\n                <payer>\n                    <documentType>CC</documentType>\n                    <document>1037390241</document>\n                    <firstName>Juan</firstName>\n                    <lastName>Chavarria</lastName>\n                    <emailAddress>juanchavarria@gmail.com</emailAddress>\n                    <address></address>\n                    <city>Medellin</city>\n                    <province>Antioquia</province>\n                    <country>Colombia</country>\n                    <phone>3106785678</phone>\n                    <mobile>3106785678</mobile>\n                    <postalCode></postalCode>\n                </payer>\n                <buyer>\n                    <documentType>CC</documentType>\n                    <document>1037390241</document>\n                    <firstName>Juan</firstName>\n                    <lastName>Chavarria</lastName>\n                    <emailAddress>juanchavarria@gmail.com</emailAddress>\n                    <address></address>\n                    <city>Medellin</city>\n                    <province>Antioquia</province>\n                    <country>Colombia</country>\n                    <phone>3106785678</phone>\n                    <mobile>3106785678</mobile>\n                    <postalCode></postalCode>\n                </buyer>\n                <ipAddress>191.95.158.135</ipAddress>\n                <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36</userAgent>\n            </transaction>\n        </createTransaction>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "Requests creation of a transaction. The application data specifies who the payer, buyer, and dispatch are. Also, for which of the enabled banks the request is made, and to which return URL the bank should redirect the accountholder.\n\n| Name | Type | Description |\n|-----------|------|-------------|\n| auth | Authentication | Authentication data | \n| transaction | PSETransactionRequest | Application data |\n\n**PSETransactionRequest**\n\nA structure that represents a transaction request with debits on account PSE.\n\n| Name | Type | Description |\n|-----------|------|-------------|\n| bankCode | string[4] | The code of the financial institution with which to make the transaction. |\n| bankInterface | string[1] | Type of bank interface to be deployed  `0 = PEOPLE, 1 = COMPANIES]` |\n| returnURL | string[255] | Return URL specified for the financial institution. |\n| reference | string[32] | Unique payment reference. |\n| description | description | Description of the payment. |\n| language | string[2] | Expected language for transactions according to **ISO 631-1**, sustained capital. |\n| currency | string[3] | Currency to be used for collection according to **ISO 4217**. |\n| totalAmount | double | Total value to be collected. |\n| taxAmount | double | Applied tax discrimination. |\n| devolutionBase | double | Return base for tax. |\n| tipAmount | double | Tipping or other tax-exempt securities (airport fee) that must be added to the total value to be paid. |\n| payer | Person | Payer information. |\n| buyer | Person | Buyer information. |\n| shipping | Person | Receiver information. |\n| ipAddress | string[15] | The IP address from which the payer makes the transaction. |\n| userAgent | string[255] | Navigation agent used by the payer. | \n| additionalData | Attribute[] | Additional data to be stored with the transaction. |\n\n\nPerson\n\nStructure to reflect the information of a person involved in a payment order.\n\n**PARAMETERS**\n\n| Name | Type | Description |\n|-----------|------|-------------|\n| document | string[12] | Person identification number. |\n| documentType | string[3] | Type of identification document of the person. CC - CE Colombian Citizenship Card - IT Aliens Card - PPN Identity Card - NIT Passport - SSN Tax Identification Number - Social Security Number |\n| lastName | string[60] | Surnames |\n| company | string[60] | Name of the company in which you work or represent. |\n| emailAddress | string[80] | Email. |\n| address | string[100] | Full postal address. |\n| city | string[50] | Name of city matching address. |\n| province | string[50] | Name of province or department matching address. |\n| country | string[2] | International country code that applies to physical management in accordance with ISO 3166-1, sustained capital. |\n| phone | string[30] | Home phone number. |\n| mobile | string[30] | Mobile or cellular phone number. |\n"
        },
        "description": "Once payer and/or buyer data is owned, as well as information from which bank and what type of interface bank should display, it must then consume `createTransaction` service to obtain URL to which it will need to redirect customer to complete transaction.\n \nNote that data requested to create transaction requires IP address from which client is performing transaction, as well as navigation agent information used. If you wish, you can also provide additional data with transaction, which will allow you to have this information available in placetopay's transaction inquiry console..\n\nIf service response is SUCCESS, then you will need to store returned information in your database, of vital importance `transactionId` as it is with this identifier that you will be able to query final status of transaction..\n\nNote that a SUCCESS response at this point only implies that transaction has been provisioned by bank and is waiting for client to reach bank interface, authenticate and authorize initiated operation.\n\nWhen you create transaction, transaction may fail; some reasons include amounts outside allowed range, bank unavailability, fundraising account configuration issues, among others. Use responseReasonText property to get message as to why transaction creation failed. Some non-payer codes may instruct you to generate an alert about service availability issues, particularly those related to poor configuration.\n\nOnce you have stored information in your database and confirmed that request is successful, client will be redirected to bank URL. Note that redirection to bank interface should not be performed on a frame or any other mechanism that hides URL in which client will enter its authentication data.",
        "tags": [
          "PSE Service"
        ]
      },
      "parameters": []
    },
    "tuya/v11/": {
      "post": {
        "summary": "getTransactionInformation",
        "operationId": "post-soap-tuya-v11",
        "responses": {
          "200": {
            "description": "**TransactionInformation**. Información del estado de la transacción."
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <getTransactionInformation xmlns=\"https://placetopay.com/soap/tuya\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-06T00:56:56+01:00</seed>\n            </auth>\n            <transactionID xmlns=\"\">1503525790</transactionID>\n        </getTransactionInformation>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "Obtiene la información de una transacción, debe ser consultado para cualquier operación previamente creada con el método createTransaction ya sea cuando regresa del medio de pago o cuando al menos han transcurrido 7 minutos desde que el cliente fue redirigido a la interfaz del medio de pago. Deberá consumirse en intervalos de al menos cada 12 minutos hasta que tenga un estado de transacción `transactionState` diferente a `PENDING`.\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Datos de autenticación |\n| transactionID | int | Identificador único de la transacción en Placetopay, equivale al retornado en la creación de la transacción. |"
        },
        "tags": [
          "Servicio Tuya"
        ],
        "description": "Una vez el cliente ha finalizado la transacción en la interfaz del banco, el banco redirige al cliente a la URL especificada al crear la transacción, en este punto de entrada a su aplicativo, usted deberá consumir el servicio `getTransactionInformation` que le permite determinar el estado de la transacción. Solo si la transacción tiene como estado `OK` es porque la transacción fue autorizada, si por el contrario obtiene un estado `PENDING` es porque aún no tiene respuesta final del banco acerca de la transacción.\n\nYa sea que el cliente retorne al punto de reingreso y que la transacción esté pendiente, o que haya abandonado la operación y haya roto el flujo normal, se deberá consumir el servicio `getTransactionInformation` para todas las operaciones que desde que fue invocado el `createTransaction` llevan más de 7 minutos sin un estado final de operación."
      },
      "parameters": []
    },
    "tuya/v11": {
      "post": {
        "summary": "createTransaction",
        "operationId": "post-soap-tuya-v11",
        "responses": {
          "200": {
            "description": "**TuyaTransactionResponse**. Respuesta de la creación de la transacción, tenga en cuenta que la URL del medio de pago se entrega solo si la propiedad returnCode es `SUCCESS`.\n"
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <createTransaction xmlns=\"https://placetopay.com/soap/tuya\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>c4864567c1d5595012af42d0f5aa1d4153151762</tranKey>\n                <seed>2021-02-06T22:24:38+01:00</seed>\n            </auth>\n            <transaction xmlns=\"\">\n                <franchise>TY_EX</franchise>\n                <returnURL>https://www.google.com/</returnURL>\n                <reference>123</reference>\n                <description>prueba</description>\n                <language>ES</language>\n                <currency>COP</currency>\n                <totalAmount>1000</totalAmount>\n                <taxAmount>0</taxAmount>\n                <devolutionBase>0</devolutionBase>\n                <tipAmount>0</tipAmount>\n                <payer>\n                    <documentType>CC</documentType>\n                    <document>3456324567</document>\n                    <firstName>Jhon</firstName>\n                    <lastName>Doe</lastName>\n                    <emailAddress>ejemplo@correo.com</emailAddress>\n                    <address>cra 56 34-67</address>\n                    <city>Medellin</city>\n                    <province>Antioquia</province>\n                    <country>Colombia</country>\n                    <phone>3107865</phone>\n                    <mobile>3107865768</mobile>\n                </payer>\n                <buyer>\n                    <documentType>CC</documentType>\n                    <document>3456324567</document>\n                    <firstName>Jhon</firstName>\n                    <lastName>Doe</lastName>\n                    <emailAddress>ejemplo@correo.com</emailAddress>\n                    <address>cra 56 34-67</address>\n                    <city>Medellin</city>\n                    <province>Antioquia</province>\n                    <country>Colombia</country>\n                    <phone>3107865</phone>\n                    <mobile>3107865768</mobile>\n                </buyer>\n                <ipAddress>192.168.1.34</ipAddress>\n                <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36</userAgent>\n            </transaction>\n        </createTransaction>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "Solicita la creación de una transacción. En los datos de la solicitud se especifica quien es el pagador, el comprador y el despacho. Así mismo para cuál de los medios de pago habilitados se hace la petición y a que URL de retorno debe el medio de pago redirigir al tarjeta habiente.\n\n**PARÁMETROS**\n\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Datos de autenticación. |\n| transaction | TuyaTransactionRequest | Datos de la solicitud. |\n\n**TuyaTransactionRequest**\n\nEstructura que representa una solicitud de transacción con tarjetas expedidas por TUYA.\n\n**ATRIBUTOS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| franchise | string[4] | Código del medio de pago `TY_EX = Tarjeta Éxito, TY_AK = Tarjeta Alkosto` |\n| returnURL | string[255] | URL de retorno especificada para la entidad financiera. |\n| reference | string[32] | Referencia única de pago. |\n| description | \tstring[255] | Descripción del pago. |\n| language | string[2] | Idioma esperado para las transacciones acorde a **ISO 631-1**, mayúscula sostenida.|\n| currency | string[3] | Moneda a usar para el recaudo acorde a **ISO 4217**. |\n| totalAmount | double | Valor total a recaudar. |\n| taxAmount | double | Discriminación del impuesto aplicado. |\n| devolutionBase | double | Base de devolución para el impuesto. |\n| tipAmount | double | Propina u otros valores exentos de impuesto (tasa aeroportuaria) y que deben agregarse al valor total a pagar. |\n| payer | Person | Información del pagador. |\n| buyer | Person | Información del comprador. |\n| shipping | Person | Información del receptor. |\n| ipAddress | string[15] | Dirección IP desde la cual realiza la transacción el pagador. |\n| userAgent | string[255] | Agente de navegación utilizado por el pagador. |\n| additionalData | Attribute[] | Datos adicionales para ser almacenados con la transacción. |\n\n\nPerson\n\nEstructura para reflejar la información de una persona involucrada en una orden de pago.\n\n**ATRIBUTOS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| document | string[12] | Número de identificación de la persona. |\n| documentType | string[3] | Tipo de documento de identificación de la persona. CC = Cédula de ciudadanía colombiana CE = Cédula de extranjería TI = Tarjeta de identidad PPN = Pasaporte NIT = Número de identificación tributaria SSN = Social Security Number |\n| lastName | string[60] | Apellidos |\n| company | string[60] | Nombre de la compañía en la cual labora o representa. |\n| emailAddress | string[80] | Correo electrónico. |\n| address | string[100] | Dirección postal completa. |\n| city | string[50] | Nombre de la ciudad coincidente con la dirección. |\n| province | string[50] | Nombre de la provincia o departamento coincidente con la dirección. |\n| country | string[2] | Código internacional del país que aplica a la dirección física acorde a **ISO 3166-1**, mayúscula sostenida. |\n| phone | string[30] | Número de telefonía fija. |\n| mobile | string[30] | Número de telefonía móvil o celular. |\n"
        },
        "tags": [
          "Servicio Tuya"
        ],
        "description": "Una vez ya se tengan los datos del pagador y comprador, así como la información de qué medio de pago usará, deberá entonces consumir el servicio de createTransaction para obtener la URL a la cual deberá redirigir al cliente para finalizar la transacción.\n\nDebe tener en cuenta que en los datos solicitados para crear la transacción se requiere la dirección IP desde la cual el cliente estará realizando la transacción, así como la información del agente de navegación usado. Si lo desea, también puede proveer datos adicionales con la transacción, los cuales le permitirán tener esta información disponible en la consola de consulta de transacciones de Placetopay. Tenga en cuenta que el documento del pagador es el documento del dueño de la tarjeta y que no podrá ser modificado posteriormente en la interfaz de TUYA para ese medio de pago.\n\nSi la respuesta del servicio es `SUCCESS`, entonces deberá almacenar la información retornada en su base de datos, de vital importancia el `transactionID` pues es con este identificador que podrá consultar el estado final de la transacción.\n\nTenga en cuenta que una respuesta `SUCCESS` en este punto sólo implica que la transacción ha sido aprovisionada por TUYA y está en espera que el cliente llegue a la interfaz del medio de pago, se autentique y autorice la operación iniciada.\n\nAl crear la transacción, esta puede fallar; algunos motivos incluyen montos por fuera del rango permitido, no disponibilidad del medio de pago, problemas de configuración de la cuenta recaudadora, entre otros. Utilice el parametro `responseReasonText` para obtener el mensaje de por qué falló la creación de la transacción. Algunos códigos no relacionados con el pagador pueden indicarle que genere una alerta sobre problemas con la disponibilidad del servicio, particularmente los relacionados con mala configuración.\n\nUna vez ha almacenado la información en su base de datos y ha confirmado que es exitosa la petición, se redirigirá al cliente a la URL del medio de pago. Tenga en cuenta que la redirección a la interfaz del medio de pago no debe realizarse en un frame o cualquier otro mecanismo que oculte la URL en la cual el cliente ingresará sus datos de autenticación."
      },
      "parameters": []
    },
    "cashorder/": {
      "post": {
        "summary": "addOrder",
        "operationId": "post-cashorder",
        "responses": {
          "200": {
            "description": "**int**. La referencia única de la orden de pago en Placetopay."
          }
        },
        "requestBody": {
          "content": {
            "application/xop+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <addOrder xmlns=\"https://www.placetopay.com/soap/cashorder/\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n            <order xmlns=\"\">\n                <reference>123456</reference>\n                <description>123</description>\n                <language>ES</language>\n                <currency>COP</currency>\n                <totalAmount>1000</totalAmount>\n                <taxAmount>0</taxAmount>\n                <subtotalAmount>0</subtotalAmount>\n                <expiration>2021-02-08T17:47:59-05:00</expiration>\n                <buyer>\n                    <documentType>CC</documentType>\n                    <document>1037678567</document>\n                    <firstName>Jhon</firstName>\n                    <lastName>Doe</lastName>\n                    <emailAddress>ejemplo@correo.com</emailAddress>\n                    <address>cra 45 67-78</address>\n                    <city>Medellin</city>\n                    <province>Antioquia</province>\n                    <phone>3105675689</phone>\n                    <mobile>3105675689</mobile>\n                </buyer>\n                <ipAddress>192.168.2.34</ipAddress>\n                <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36</userAgent>\n                <notificationURL>https://www.google.com/</notificationURL>\n            </order>\n        </addOrder>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "**PARÁMETROS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | datos de autenticación. |\n| order | CashOrder | datos de la orden de pago. |\n\n**CashOrder**\n\nEstructura con la información de una orden de pago en efectivo.\n\n**ATRIBUTOS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| reference | string[32] | Referencia única de pago. |\n| description | string[255] | Descripción o detalle de la orden de pago. |\n| language | string[2] | Idioma esperado para las transacciones acorde a **ISO 631-1**, usar ES. |\n| currency | string[3] | Código de la moneda acorde a ISO 4217 en la cual está expresado el cobro, usar COP. |\n| totalAmount | decimal | Valor total a recaudar. |\n| taxAmount | decimal | Discriminación del impuesto aplicado. |\n| subtotalAmount | decimal | Valor base antes de impuestos. |\n| expiration | datetime | Fecha y hora máxima hasta la cual se recibe el pago [AAAA-MM-DDTHH:NN:SS] | \n| buyer | Person | Información del comprador. |\n| ipAddress| string | Dirección IP desde la cual realiza la solicitud el pagador. |\n| userAgent | string | Agente de navegación utilizado por el pagador al hacer la solicitud. |\n| additionalData | Attribute[] | Datos adicionales para ser almacenados con la transacción. |\n| notificationURL | string[255] | URL de notificación una vez la transacción es realizada. |"
        },
        "tags": [
          "Servicio Efectivo"
        ],
        "description": "Agrega una orden de pago para efectivo."
      },
      "parameters": []
    },
    "/cashorder/": {
      "post": {
        "summary": "getOrder",
        "operationId": "post-cashorder",
        "responses": {
          "200": {
            "description": "**CashOrderInfo**. Información de la orden, si la orden no existe el estado de la orden será NOT_FOUND, si hay un error al consultar el registro se retornará una excepción SoapFault."
          }
        },
        "description": "Obtiene la información de una orden de pago en efectivo para conocer su estado.",
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <getOrder xmlns=\"https://www.placetopay.com/soap/cashorder/\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n            <id xmlns=\"\">306133</id>\n        </getOrder>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "**PARÁMETROS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Datos de autenticación. |\n| id | int | Referencia única de la orden de pago a consultar. |"
        },
        "tags": [
          "Servicio Efectivo"
        ]
      },
      "parameters": []
    },
    "/cashorder": {
      "post": {
        "summary": "deleteOrder",
        "operationId": "post-cashorder",
        "responses": {
          "200": {
            "description": "**int**. Número de registros eliminados, si es un cero indicará que el registro no fue hallado, si hay un error al eliminar el registro se retornará una excepción `SoapFault`."
          }
        },
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <deleteOrder xmlns=\"https://www.placetopay.com/soap/cashorder/\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n            <id xmlns=\"\">306133</id>\n        </deleteOrder>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "**PARÁMETROS**\n\n| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Datos de autenticación. |\n| id | int | Referencia única de la orden de pago a eliminar. |\n"
        },
        "description": "Elimina una orden de pago en Placetopay que no haya sido pagada.",
        "tags": [
          "Servicio Efectivo"
        ]
      }
    },
    "cashorder": {
      "post": {
        "summary": "getOrderPDF",
        "operationId": "post-cashorder",
        "responses": {
          "200": {
            "description": "base64Binary. PDF generado codificado como base64, si hay un error al generar el PDF se retornará una excepción `SoapFault`."
          }
        },
        "description": "Genera el PDF para el pago en efectivo en la red de corresponsales que actualmente se permita. Para la fecha de este documento esta red involucra a corresponsales del grupo AVAL/ATH, Baloto, Efecty, cajas de Almacenes Éxito, Carulla, Surtimax y Súper Inter. Así como cajeros electrónicos del grupo AVAL. Próximamente la red de oficinas de Bancolombia.",
        "requestBody": {
          "content": {
            "application/soap+xml": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Ejemplo": {
                  "value": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <Body>\n        <getOrderPDF xmlns=\"https://www.placetopay.com/soap/cashorder/\">\n            <auth xmlns=\"\">\n                <login>6a95d841f363dc91faa1e5d2f4d437c5</login>\n                <tranKey>d211a0fd5490252d0cbad1c84a2e5c3fa9e42d38</tranKey>\n                <seed>2021-02-02T00:56:56+01:00</seed>\n            </auth>\n<id xmlns=\"\">306133</id>\n        </getOrderPDF>\n    </Body>\n</Envelope>"
                }
              }
            }
          },
          "description": "| Nombre | Tipo | Descripción |\n|-----------|------|-------------|\n| auth | Authentication | Datos de autenticación. |\n| id | int | Referencia única de la orden de pago generada. |"
        },
        "tags": [
          "Servicio Efectivo"
        ]
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "description": "",
        "x-examples": {
          "Alice Smith": {
            "id": 142,
            "firstName": "Alice",
            "lastName": "Smith",
            "email": "alice.smith@gmail.com",
            "dateOfBirth": "1997-10-31",
            "emailVerified": true,
            "signUpDate": "2019-08-24"
          }
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the given user."
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1997-10-31"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Set to true if the user's email has been verified."
          },
          "createDate": {
            "type": "string",
            "format": "date",
            "description": "The date that the user was created."
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "emailVerified"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Servicio PSE"
    },
    {
      "name": "Servicio Tarjeta credito"
    },
    {
      "name": "Servicio Tuya"
    },
    {
      "name": "Servicio Efectivo"
    }
  ]
}